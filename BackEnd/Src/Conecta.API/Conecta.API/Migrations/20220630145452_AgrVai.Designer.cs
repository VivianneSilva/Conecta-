// <auto-generated />
using System;
using Conecta.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conecta.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220630145452_AgrVai")]
    partial class AgrVai
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conecta.API.Models.Adm", b =>
                {
                    b.Property<int>("AdmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdmId");

                    b.ToTable("Adms");
                });

            modelBuilder.Entity("Conecta.API.Models.Aluno", b =>
                {
                    b.Property<int>("AlunoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Cep")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("DataNasc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Endereco")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Senha")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("AlunoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("Conecta.API.Models.Materia", b =>
                {
                    b.Property<int>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("Conecta.API.Models.MateriaProfessorTurma", b =>
                {
                    b.Property<int>("MateriaProfessorTurmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("MateriaProfessorTurmaId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("TurmaId");

                    b.ToTable("MateriaProfessorTurma");
                });

            modelBuilder.Entity("Conecta.API.Models.Nota", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Ano")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Bimestre1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bimestre2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bimestre3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bimestre4")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MateriaProfessorTurmaId")
                        .HasColumnType("int");

                    b.HasKey("NotaId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("MateriaProfessorTurmaId");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("Conecta.API.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Senha")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProfessorId");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("Conecta.API.Models.Turma", b =>
                {
                    b.Property<int>("TurmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoTurma")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TurmaId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("MateriaProfessor", b =>
                {
                    b.Property<int>("MateriasMateriaId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessoresProfessorId")
                        .HasColumnType("int");

                    b.HasKey("MateriasMateriaId", "ProfessoresProfessorId");

                    b.HasIndex("ProfessoresProfessorId");

                    b.ToTable("MateriaProfessor");
                });

            modelBuilder.Entity("MateriaTurma", b =>
                {
                    b.Property<int>("MateriasMateriaId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasTurmaId")
                        .HasColumnType("int");

                    b.HasKey("MateriasMateriaId", "TurmasTurmaId");

                    b.HasIndex("TurmasTurmaId");

                    b.ToTable("MateriaTurma");
                });

            modelBuilder.Entity("ProfessorTurma", b =>
                {
                    b.Property<int>("ProfessoresProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasTurmaId")
                        .HasColumnType("int");

                    b.HasKey("ProfessoresProfessorId", "TurmasTurmaId");

                    b.HasIndex("TurmasTurmaId");

                    b.ToTable("ProfessorTurma");
                });

            modelBuilder.Entity("Conecta.API.Models.Aluno", b =>
                {
                    b.HasOne("Conecta.API.Models.Turma", "Turma")
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("Conecta.API.Models.MateriaProfessorTurma", b =>
                {
                    b.HasOne("Conecta.API.Models.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.Turma", "Turma")
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Professor");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("Conecta.API.Models.Nota", b =>
                {
                    b.HasOne("Conecta.API.Models.Aluno", "Aluno")
                        .WithMany("Notas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.MateriaProfessorTurma", "MateriaProfessorTurma")
                        .WithMany("Notas")
                        .HasForeignKey("MateriaProfessorTurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("MateriaProfessorTurma");
                });

            modelBuilder.Entity("MateriaProfessor", b =>
                {
                    b.HasOne("Conecta.API.Models.Materia", null)
                        .WithMany()
                        .HasForeignKey("MateriasMateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MateriaTurma", b =>
                {
                    b.HasOne("Conecta.API.Models.Materia", null)
                        .WithMany()
                        .HasForeignKey("MateriasMateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.Turma", null)
                        .WithMany()
                        .HasForeignKey("TurmasTurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorTurma", b =>
                {
                    b.HasOne("Conecta.API.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conecta.API.Models.Turma", null)
                        .WithMany()
                        .HasForeignKey("TurmasTurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conecta.API.Models.Aluno", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Conecta.API.Models.MateriaProfessorTurma", b =>
                {
                    b.Navigation("Notas");
                });
#pragma warning restore 612, 618
        }
    }
}
